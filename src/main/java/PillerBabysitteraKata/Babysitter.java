/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PillerBabysitteraKata;

public class Babysitter {
	/*
	 * This class will include the description of the Babysitter based on the
	 * requirements page
	 */
	// BabySitter start time of availability
	public static final int START_TIME = 17;
	// BabySitter end time of availability
	public static final int END_TIME = 28;
	// BabySitter start time for the evening
	private int startTime;
	// Babysitter end time for the evening
	private int endTime;
	// earlyPay: pay for the beginning of the night;
	private int earlyPay;
	// specialPay: pay for any specified times with different pay;
	private int specialPay;
	// Time the special pay will start
	private int specialScheduleStart;
	// Time Special schedule will ends
	private int specialScheduleEnd;
	// latePay: pay for later portion of the night.
	private int latePay;

	private int latePayStartTime;

	private int earlyRateTimeFrame = 0;
	private int specialRateTimeFrame = 0;
	private int lateRateTimeFrame = 0;
	private int subTotal1 = 0;
	private int subTotal2 = 0;
	private int subTotal3 = 0;

	public Babysitter() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Babysitter(int startTime, int endTime, int earlyPay, int specialPay, int specialScheduleStart,
			int specialScheduleEnd, int latePay, int earlyRateTimeFrame, int specialRateTimeFrame,
			int lateRateTimeFrame, int latePayStartTime) {
		super();
		this.startTime = startTime;
		this.endTime = endTime;
		this.earlyPay = earlyPay;
		this.specialPay = specialPay;
		this.specialScheduleStart = specialScheduleStart;
		this.specialScheduleEnd = specialScheduleEnd;
		this.latePay = latePay;
		this.latePayStartTime = latePayStartTime;
	}

	public int getStartTime() {
		return startTime;
	}

	public void setStartTime(int startTime) {
		this.startTime = startTime;
	}

	public int getEndTime() {
		return endTime;
	}

	public void setEndTime(int endTime) {
		this.endTime = endTime;
	}

	public double getEarlyPay() {
		return earlyPay;
	}

	public void setEarlyPay(int earlyPay) {
		this.earlyPay = earlyPay;
	}

	public double getSpecialPay() {
		return specialPay;
	}

	public void setSpecialPay(int specialPay) {
		this.specialPay = specialPay;
	}

	public double getLatePay() {
		return latePay;
	}

	public void setLatePay(int latePay) {
		this.latePay = latePay;
	}

	public int getSpecialScheduleStart() {
		return specialScheduleStart;
	}

	public void setSpecialScheduleStart(int specialScheduleStart) {
		this.specialScheduleStart = specialScheduleStart;
	}

	public int getSpecialScheduleEnd() {
		return specialScheduleEnd;
	}

	public void setSpecialScheduleEnd(int specialScheduleEnd) {
		this.specialScheduleEnd = specialScheduleEnd;
	}

	public int getLatePayStartTime() {
		return latePayStartTime;
	}

	public void setLatePayStartTime(int latePayStartTime) {
		this.latePayStartTime = latePayStartTime;
	}

	public boolean validateWithinHoursOfAvailability(int startTime, int endTime) {
		if (startTime >= START_TIME && endTime <= END_TIME) {
			return true;
		}
		return false;
	}

	int familyATotalBasedOnServiceNeeds() {

		if (validateWithinHoursOfAvailability(getStartTime(), getEndTime())) {
			if (getStartTime() < getLatePayStartTime()) {
				earlyRateTimeFrame = getLatePayStartTime() - getStartTime();
				subTotal1 = (int) (earlyRateTimeFrame * getEarlyPay());
			}
			if (getEndTime() > getLatePayStartTime()) {
				lateRateTimeFrame = getEndTime() - getLatePayStartTime();
				subTotal2 = (int) (lateRateTimeFrame * getLatePay());
			}

		}
		return subTotal1 + subTotal2;
	}

	int familyBTotalBasedOnServiceNeeds() {

		if (validateWithinHoursOfAvailability(getStartTime(), getEndTime())) {
			if (getStartTime() < getLatePayStartTime()) {
				earlyRateTimeFrame = getLatePayStartTime() - getStartTime();
				subTotal1 = (int) (earlyRateTimeFrame * getEarlyPay());
			}
			if (getSpecialScheduleStart() >= getLatePayStartTime() && getSpecialScheduleEnd() <= 24) {
				specialRateTimeFrame = 24 - getSpecialScheduleStart();
				subTotal2 = (int) (specialRateTimeFrame * getSpecialPay());
			}
			if (getEndTime() > 24) {
				lateRateTimeFrame = getEndTime() - 24;
				subTotal3 = (int) (lateRateTimeFrame * getLatePay());
			}
		}
		return subTotal1 + subTotal2 + subTotal3;
	}

	int familyCTotalBasedOnServiceNeeds() {

		if (validateWithinHoursOfAvailability(getStartTime(), getEndTime())) {
			if (getStartTime() < getLatePayStartTime()) {
				earlyRateTimeFrame = getLatePayStartTime() - getStartTime();
				subTotal1 = (int) (earlyRateTimeFrame * getEarlyPay());
			}
			if (getEndTime() > getLatePayStartTime()) {
				lateRateTimeFrame = getEndTime() - getLatePayStartTime();
				subTotal2 = (int) (lateRateTimeFrame * getLatePay());
			}
		}
		return subTotal1 + subTotal2;
	}
}
