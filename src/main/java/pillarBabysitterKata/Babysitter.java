/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pillarBabysitterKata;

public class Babysitter {
	/*
	 * This class will include the description of the Babysitter based on the
	 * requirements page
	 */
	// BabySitter start time of availability
	public static final int START_TIME = 17;
	// BabySitter end time of availability
	public static final int END_TIME = 28;
	// BabySitter start time for the evening
	private int startTime;
	// Babysitter end time for the evening
	private int endTime;

	// specialPay: pay for any specified times with different pay;
	private int specialPay;
	// Time the special pay will start
	private int specialScheduleStart;
	// Time Special schedule will ends
	private int specialScheduleEnd;
	// latePay: pay for later portion of the night.

	private int latePayStartTime;

	private int earlyRateTimeFrame = 0;
	private int specialRateTimeFrame = 0;
	private int lateRateTimeFrame = 0;
	private int subTotal1 = 0;
	private int subTotal2 = 0;
	private int subTotal3 = 0;

	private String family;

	public Babysitter() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Babysitter(int startTime, int endTime, int specialPay, int specialScheduleStart, int specialScheduleEnd,
			int latePayStartTime, int earlyRateTimeFrame, int specialRateTimeFrame, int lateRateTimeFrame,
			int subTotal1, int subTotal2, int subTotal3, String family) {
		super();
		this.startTime = startTime;
		this.endTime = endTime;
		this.specialPay = specialPay;
		this.specialScheduleStart = specialScheduleStart;
		this.specialScheduleEnd = specialScheduleEnd;
		this.latePayStartTime = latePayStartTime;
		this.earlyRateTimeFrame = earlyRateTimeFrame;
		this.specialRateTimeFrame = specialRateTimeFrame;
		this.lateRateTimeFrame = lateRateTimeFrame;
		this.subTotal1 = subTotal1;
		this.subTotal2 = subTotal2;
		this.subTotal3 = subTotal3;
		this.family = family;
	}

	public int getStartTime() {
		return startTime;
	}

	public void setStartTime(int startTime) {
		this.startTime = startTime;
	}

	public int getEndTime() {
		return endTime;
	}

	public void setEndTime(int endTime) {
		this.endTime = endTime;
	}

	public double getSpecialPay() {
		return specialPay;
	}

	public void setSpecialPay(int specialPay) {
		this.specialPay = specialPay;
	}

	public int getSpecialScheduleStart() {
		return specialScheduleStart;
	}

	public void setSpecialScheduleStart(int specialScheduleStart) {
		this.specialScheduleStart = specialScheduleStart;
	}

	public int getSpecialScheduleEnd() {
		return specialScheduleEnd;
	}

	public void setSpecialScheduleEnd(int specialScheduleEnd) {
		this.specialScheduleEnd = specialScheduleEnd;
	}

	public int getLatePayStartTime() {
		return latePayStartTime;
	}

	public void setLatePayStartTime(int latePayStartTime) {
		this.latePayStartTime = latePayStartTime;
	}

	public String getFamily() {
		return family;
	}

	public void setFamily(String family) {
		this.family = family;
	}

	public boolean validateWithinHoursOfAvailability(int startTime, int endTime) {
		if (startTime >= START_TIME && endTime <= END_TIME) {
			return true;
		}
		return false;
	}

	public int familyTotalBasedOnServiceNeeds() {
		if (getFamily().equalsIgnoreCase("B"))
			if (validateWithinHoursOfAvailability(getStartTime(), getEndTime()) == true) {
				if (getSpecialScheduleStart() >= 22 && getSpecialScheduleEnd() <= 24) {
					specialRateTimeFrame = getLatePayStartTime() - getSpecialScheduleStart();
					subTotal3 = (int) (specialRateTimeFrame * getSpecialPay());
				}

				if (getStartTime() < getLatePayStartTime()) {
					earlyRateTimeFrame = getLatePayStartTime() - specialRateTimeFrame - getStartTime();
					subTotal1 = (int) (earlyRateTimeFrame * 12);
				}
				if (getEndTime() > getLatePayStartTime()) {
					lateRateTimeFrame = getEndTime() - getLatePayStartTime();
					subTotal2 = (int) (lateRateTimeFrame * 16);
				}
				return subTotal1 + subTotal2 + subTotal3;
			}
		if (getFamily().equalsIgnoreCase("A"))
			if (validateWithinHoursOfAvailability(getStartTime(), getEndTime()) == true) {

				if (getStartTime() < getLatePayStartTime()) {
					earlyRateTimeFrame = getLatePayStartTime() - getStartTime();
					subTotal1 = (int) (earlyRateTimeFrame * 15);
				}
				if (getEndTime() > getLatePayStartTime()) {
					lateRateTimeFrame = getEndTime() - getLatePayStartTime();
					subTotal2 = (int) (lateRateTimeFrame * 20);
				}
				return subTotal1 + subTotal2;
			}
		if (getFamily().equalsIgnoreCase("C"))
			if (validateWithinHoursOfAvailability(getStartTime(), getEndTime()) == true) {

				if (getStartTime() < getLatePayStartTime()) {
					earlyRateTimeFrame = getLatePayStartTime() - getStartTime();
					subTotal1 = (int) (earlyRateTimeFrame * 21);
				}
				if (getEndTime() > getLatePayStartTime()) {
					lateRateTimeFrame = getEndTime() - getLatePayStartTime();
					subTotal2 = (int) (lateRateTimeFrame * 15);
				}

			}
		return subTotal1 + subTotal2;
	}
}
